name: Deploy to AWS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

env:
  AWS_REGION: "us-east-1"  # Update to your preferred AWS region
  ECR_REPOSITORY: "nginx-webserver-repo"  # ECR repository name

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-to-aws-main  # Unique group name to prevent concurrent runs
      cancel-in-progress: true

    outputs:
      ec2_ip: ${{ steps.get_ec2_ip.outputs.EC2_PUBLIC_IP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 1: Set up AWS credentials using Access Keys
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Check for and create ECR repository, build, and push Docker image to ECR
      - name: Ensure ECR repository exists
        env:
          ECR_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          IMAGE_TAG: "latest"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 4: Install Terraform CLI
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0  # Specify Terraform version

      # Step 5: Initialize Terraform
      - name: Terraform Init
        working-directory: ./env/dev 
        run: terraform init

      # Step 6: Terraform Apply to deploy infrastructure
      - name: Terraform Apply
        working-directory: ./env/dev
        env:
          EC2_PUBLIC_KEY: ${{ secrets.EC2_PUBLIC_KEY }} 
        run: terraform apply -auto-approve -lock=false -var="public_key=${EC2_PUBLIC_KEY}"

      # Step 7: Capture EC2 IP from Terraform Output
      - name: Get EC2 Public IP
        id: get_ec2_ip
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=${EC2_IP}" >> $GITHUB_ENV
          echo "::set-output name=EC2_PUBLIC_IP::$EC2_IP"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: dev
    concurrency:
      group: deploy-to-aws-main  # Same group as above to avoid conflicts
      cancel-in-progress: true

    steps:
      - name: Configure AWS Credentials with Access Keys
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/private_key
          chmod 600 /tmp/private_key

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          IMAGE_TAG: "latest"
          EC2_PUBLIC_IP: "${{ needs.build-and-push.outputs.ec2_ip }}"
        run: |
          # Step 1: SSH into EC2 and pull the Docker image
          ssh -o "StrictHostKeyChecking=no" -i /tmp/private_key ec2-user@$EC2_PUBLIC_IP << EOF
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # Step 2: Stop and remove any existing container
            docker rm -f my_container || true

            # Step 3: Run a new container with the latest image
            docker run -d --name my_container -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF